[build-system]
requires = ["setuptools>=48", "setuptools_scm[toml]>=6.3.1"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

[project]
name = "dvc-data"
description = "DVC's data management subsystem"
readme = "README.rst"
license = {text = "Apache-2.0"}
authors = [{ name = "Iterative", email = "support@dvc.org" }]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Development Status :: 4 - Beta",
]
requires-python = ">=3.8"
dynamic = ["version"]
dependencies = [
    "funcy>=1.14",
    "dictdiffer>=0.8.1",
    "pygtrie>=2.3.2",
    "shortuuid>=0.5.0",
    "dvc-objects>=2,<3",
    "diskcache>=5.2.1",
    "attrs>=21.3.0",
    "sqltrie>=0.9.0,<1",
    "tqdm>=4.63.1,<5",
]

[project.urls]
Issues = "https://github.com/iterative/dvc-data/issues"
Source = "https://github.com/iterative/dvc-data"

[project.optional-dependencies]
cli = [
    "typer[all]>=0.6",
    "rich>=10.11.0,<14.0.0",
]
all = [
    "dvc-data[cli]",
]
tests = [
    "pytest<8,>=7",
    "pytest-sugar",
    "pytest-cov>=4.1.0",
    "pytest-mock",
    "pytest-benchmark>=4",
    "pytest-servers[s3]==0.1.3",
]
dev = [
    "dvc-data[all]",
    "dvc-data[tests]",
    "blake3>=0.3.1",
    "mypy==1.7.1",
    "types-tqdm",
]

[project.scripts]
dvc-data = "dvc_data.__main__:main"

[tool.setuptools.package-data]
dvc_data = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.pytest.ini_options]
addopts = "-ra -Werror --benchmark-skip"

[tool.coverage.run]
branch = true
source = ["dvc_data", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "raise AssertionError",
    "@overload",
]

[tool.mypy]
# Error output
show_column_numbers = true
show_error_codes = true
show_error_context = true
show_traceback = true
pretty = true
check_untyped_defs = true
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
strict_equality = true
no_implicit_optional = true
warn_unused_configs = true
files = ["src", "tests"]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "fsspec.*",
    "funcy",
    "diskcache",
    "pygtrie",
    "dictdiffer",
    "shortuuid.*",
]

[tool.codespell]
ignore-words-list = "fo"

[tool.ruff]
ignore = [
    "ISC001", # single-line-implicit-string-concatenation
    "PLR2004", # magic-value-comparison
    "PLW2901", # redefined-loop-name
    "RET501", # unnecessary-return-none
    "RET502", # implicit-return-value
    "RET503", # implicit-return
    "S101", # assert
    "SIM105", # suppressible-exception
    "SIM108", # if-else-block-instead-of-if-exp
    "SIM117", # multiple-with-statements
]
select = [
    "A", # flake8-buitlins
    "ASYNC", # flake8-async
    "B", # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4", # flake8-comprehensions
    "C90", # mccabe
    "DTZ", # flake8-datetimez
    "E", # pycodestyle - Error
    "EXE", # flake8-executable
    "F", # pyflakes
    "FLY", # flynt-rules
    "G", # flake8-logging-format
    "I", # isort
    "ICN", # flake8-import-conventions
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "PERF101", # perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PYI", # flake8-pyi
    "Q", # flae8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "SLOT", # flake8-slots
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP", # pyupgrade
    "W", # pycodestyle - Warning
    "YTT", # flake8-2020
]
show-source = true
show-fixes = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false
parametrize-names-type = "csv"

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"funcy.cached_property" = {msg = "use `from dvc_data.utils import cached_property` instead."}
"functools.cached_property" = {msg = "use `from dvc_data.utils import cached_property` instead."}

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
known-first-party = ["dvc_data"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.per-file-ignores]
"src/dvc_data/cli.py" = ["T201", "B008"]
